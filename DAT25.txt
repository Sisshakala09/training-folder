public class EcomContext:DbContext
 {
     public EcomContext(DbContextOptions<EcomContext> options): base(options)
     {
         
     }
     public DbSet<Category> Categories { get; set; }
     public DbSet<Product> Products { get; set; }
 }

***********************************************

add-migration -context ecomcontext first
update-database -context ecomcontext

**********************************************

"ConnectionStrings": {
  "DefaultConnection": "Server=NEDIYADATH\\SQLEXPRESS;Database=ecomDb;Trusted_Connection=True;TrustServerCertificate=true;MultipleActiveResultSets=true",
  "ecomConnection": "Server=NEDIYADATH\\SQLEXPRESS;Database=ecomDb;Trusted_Connection=True;TrustServerCertificate=true;MultipleActiveResultSets=true"
}

**********************************************

var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));

var con = builder.Configuration.GetConnectionString("ecomConnection") ?? throw new InvalidOperationException("Connection string 'ecomConnection' does not exist");
builder.Services.AddDbContext<EcomContext>(options =>
options.UseSqlServer(con));

**********************************************

var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));

var con = builder.Configuration.GetConnectionString("ecomConnection") ?? throw new InvalidOperationException("Connection string 'ecomConnection' does not exist");
builder.Services.AddDbContext<EcomContext>(options =>
options.UseSqlServer(con));

builder.Services.AddDatabaseDeveloperPageExceptionFilter();

builder.Services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
    .AddEntityFrameworkStores<ApplicationDbContext>();

**********************************************


