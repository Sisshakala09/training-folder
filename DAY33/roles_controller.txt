creating roles

public class UserManagementController : Controller
  {
      private readonly RoleManager<IdentityRole> _roleManager;
      private readonly UserManager<IdentityUser> _userManager;
      public UserManagementController(RoleManager<IdentityRole> role, UserManager<IdentityUser> user)
      {
          _roleManager = role;
          _userManager = user;
      }
      [HttpGet]
      public IActionResult CreateRole()
      {
          return View();
      }


**********************************************


AddRoles


public class UserManagementController : Controller
  {
      private readonly RoleManager<IdentityRole> _roleManager;
      private readonly UserManager<IdentityUser> _userManager;
      public UserManagementController(RoleManager<IdentityRole> role, UserManager<IdentityUser> user)
      {
          _roleManager = role;
          _userManager = user;
      }
      [HttpGet]
      public IActionResult CreateRole()
      {
          return View();
      }

**********************************************

[HttpPost]
   public async Task<IActionResult> CreateRole(string roleName)
   {
       if (string.IsNullOrWhiteSpace(roleName))
       {
           ViewBag.Error = "Role name is required";
           return View();
       }

       if (!await _roleManager.RoleExistsAsync(roleName))
       {
           var result = await _roleManager.CreateAsync(new IdentityRole(roleName));
           if (result.Succeeded)
           {
               ViewBag.Message = $"Role '{roleName}' created successfully";
           }
           else
           {
               ViewBag.Error = string.Join(", ", result.Errors);
           }
       }
       else
       {
           ViewBag.Error = "Role already exists";
       }

       return View();
   }

**********************************************

add user to role

[HttpGet]
        public IActionResult AddUserToRole()
        {
            return View();
        }
        [HttpPost]
        public async Task<IActionResult> AddUserToRole(string email, string roleName)
        {
            var user = await _userManager.FindByEmailAsync(email);

            if (user == null)
            {
                ViewBag.Error = "User not found";
                return View();
            }

            if (!await _roleManager.RoleExistsAsync(roleName))
            {
                ViewBag.Error = "Role does not exist";
                return View();
            }

            var result = await _userManager.AddToRoleAsync(user, roleName);

            if (result.Succeeded)
            {
                ViewBag.Message = $"User {email} added to role {roleName}";
            }
            else
            {
                ViewBag.Error = result.Errors;
            }

            return View();
        }

**********************************************

<form asp-action="CreateRole" method="post">
    <div>
        <label>Role Name:</label>
        <input type="text" name="roleName" required />
    </div>
    <button type="submit">Create Role</button>
</form>

**********************************************

<form asp-action="AddUserToRole" method="post">
    <div>
        <label>User Email:</label>
        <input type="email" name="email" required />
    </div>
    <div>
        <label>Role Name:</label>
        <input type="text" name="roleName" required />
    </div>
    <button type="submit">Assign Role</button>
</form>

**********************************************

builder.Services.AddIdentity<IdentityUser,IdentityRole>(options => options.SignIn.RequireConfirmedAccount = true)

**********************************************
